#!/usr/bin/env python

import subprocess as subproc
import json
import os

################################################################################

class color:
    BLACK  = "\033[1;30m"
    RED    = "\033[1;31m"
    GREEN  = "\033[1;32m"
    YELLOW = "\033[1;33m"
    BLUE   = "\033[1;34m"
    PURPLE = "\033[1;35m"
    CYAN   = "\033[1;36m"
    WHITE  = "\033[1;37m"

    RESET  = "\033[0m"

################################################################################

def do(args):
    # args = " ".join([str(i) for i in args])
    return subproc.call(args)

def doAndGetRet(args):
    # args = " ".join(args)
    p = subproc.Popen(args, stdout=subproc.PIPE, stderr=subproc.PIPE)
    retval = p.communicate()
    # print(retval[1].decode("utf-8"))
    return retval[0].decode("utf-8")


################################################################################

def listremotes():
    raw = doAndGetRet(["rclone", "listremotes"])
    raw = raw.replace(":", "")
    return raw.split("\n")[:-1]

def ls(remote, path, shared=False):
    command = ["rclone", "lsjson", remote + ":" + path, "--max-depth", "1"]
    if shared:
        command.append("--drive-shared-with-me")
    raw = doAndGetRet(command)
    parsed = json.loads(raw)
    return parsed

################################################################################

def emptyCwdContent():
    state["cwdContent"] = {
            "dirs": [],
            "files": []
            }

def command_shared(params):
    state["scope"] = "shared"

def command_local(params):
    state["scope"] = "local"

def command_ls(params):
    isShared = True if state["scope"] == "shared" else False
    data = ls(state["remote"], "/".join(state["cwd"][state["scope"]]), shared=isShared)

    emptyCwdContent()

    for entry in data:
        if entry["IsDir"]:
            print(color.BLUE + entry["Name"] + color.RESET)
            state["cwdContent"]["dirs"].append(entry["Name"])
        else:
            print(entry["Name"])
            state["cwdContent"]["files"].append(entry["Name"])

    state["lsWasRun"] = True

def command_cd(params):
    if len(params) < 1:
        state["cwd"][state["scope"]] = []
    elif params[0] == "..":
        state["cwd"][state["scope"]].pop()
    else:
        dirs = params[0].split("/")
        for entry in dirs:
            state["cwd"][state["scope"]].append(entry)

    emptyCwdContent()
    state["lsWasRun"] = False

def command_get(params):

    if len(params) < 1:
        print("Command get requires one argument")
        return

    if not state["lsWasRun"]:
        print("Files not indexed. Run 'ls' and try again")
        return

    isDir = None
    if params[0] in state["cwdContent"]["dirs"]:
        isDir = True
    elif params[0] in state["cwdContent"]["files"]:
        isDir = False
    else:
        print("Ivalid path")
        return

    isShared = True if state["scope"] == "shared" else False

    if isDir:
        if os.path.isdir(params[0]):
            print("Directory [" + params[0] + "] already exists. Aborted")
            return
        do(["mkdir", params[0]])
    else:
        if os.path.isfile(params[0]):
            print("File [" + params[0] + "] already exists. Aborted")
            return

    # Base command
    command = ["rclone", "copy"];

    # Source (remote)
    command += [state["remote"] + ":" + "/".join(state["cwd"][state["scope"]]) + "/" + params[0]]

    # Destination (local)
    if isDir:
        command += [params[0]]
    else:
        command += ["."]

    # Flags
    command += ["-P"]

    if isDir:
        command += ["--create-empty-src-dirs"]

    if isShared:
        command += ["--drive-shared-with-me"]

    do(command)

def command_put(params):
    # print("CMD_GET state")
    # print(state)

    if len(params) < 1:
        print("Command put requires one argument")
        return

    isShared = True if state["scope"] == "shared" else False

    # Check source
    isDir = os.path.isdir(params[0])
    # if params[0] in state["cwdContent"]["dirs"]:
    #     isDir = True
    # elif params[0] in state["cwdContent"]["files"]:
    #     isDir = False
    # else:
    #     print("Ivalid path or files not indexed. Run 'ls' and try again")
    #     return

    # Check destination
    if not state["lsWasRun"]:
        print("Files not indexed. Run 'ls' and try again")
        return

    if isDir:
        if params[0] in state["cwdContent"]["dirs"]:
            print("Directory [" + params[0] + "] already exists. Aborted")
            return
    else:
        if params[0] in state["cwdContent"]["files"]:
            print("File [" + params[0] + "] already exists. Aborted")
            return

    # Base command
    command = ["rclone", "copy"];

    # Source (local)
    command += [params[0]]

    # Destination (remote)
    destPath = state["remote"] + ":" + "/".join(state["cwd"][state["scope"]])
    if isDir:
        destPath += "/" + params[0]

    command += [destPath]

    # Flags
    command += ["-P"]

    if isDir:
        command += ["--create-empty-src-dirs"]

    if isShared:
        command += ["--drive-shared-with-me"]

    do(command)

def command_rm(params):
    # print("CMD_RM state")
    # print(state)

    if len(params) < 1:
        print("Command rm requires one argument")
        return

    isShared = True if state["scope"] == "shared" else False

    # Check file to delete
    if not state["lsWasRun"]:
        print("Files not indexed. Run 'ls' and try again")
        return

    if params[0] not in state["cwdContent"]["dirs"] and params[0] not in state["cwdContent"]["files"]:
        print("[ " + params[0] + "] doesn't exists. Aborted")
        return

    # Base command
    command = ["rclone", "delete"];

    # File to delete
    toDeletePath = state["remote"] + ":" + "/".join(state["cwd"][state["scope"]]) + params[0]
    command += [toDeletePath]

    do(command)

def command_lls(params):
    command = ["ls"]
    if len(params) > 0:
        command += [params[0]]

    do(command)

def command_lcd(params):
    os.chdir(params[0])

commands = {
        "shared": command_shared,
        "local" : command_local,
        "ls"    : command_ls,
        "cd"    : command_cd,
        "get"   : command_get,
        "rm"    : command_rm,
        "put"   : command_put,
        "lls"   : command_lls,
        "lcd"   : command_lcd,
        }

################################################################################

state = {
        "remote": "",
        "scope": "local",
        "cwd": {
            "local": [],
            "shared": []
            },
        "cwdContent": {
            "dirs": [],
            "files": []
            },
        "lsWasRun": False
        }

def makeMenu(title, options):
    print(title)
    i=1
    for option in options:
        print(str(i)+") " + option)
        i += 1

    print()
    option = 0
    while option < 1 or option > len(options):
        try:
            option = int(input("Option: "))
        except ValueError:
            option = 0

    return option

def generatePrompt():
    prompt = state["remote"] + " [" + state["scope"]+ "]"
    prompt += " " + color.BLUE + "/".join(state["cwd"][state["scope"]]) + color.RESET
    prompt += "> "
    return prompt

def splitRespectingEscapes(string, escapeSequence):
    i = 0
    tokens = []
    lastIndex = 0

    while i < len(string):
        if string[i] == "\\":
            i += 1
        elif string[i] == escapeSequence:
            tokens.append(string[lastIndex:i].replace("\\", ""))
            lastIndex = i
            lastIndex += 1


        i += 1

    tokens.append(string[lastIndex:].replace("\\", ""))

    return tokens
            

try:
    remoteList = listremotes()
    selection = makeMenu("Choose the remote to work with: ", remoteList)
    state["remote"] = remoteList[selection-1]

    while True:
        print()
        userInput = input(generatePrompt())
        if userInput == "":
            continue
        # userInput = userInput.split(" ")
        userInput = splitRespectingEscapes(userInput, " ")
        # print("PARSED:")
        # print(userInput)

        command = userInput[0]
        params = userInput[1:]

        try:
            cmdHandler = commands[command](params)
        except KeyError:
            print("Command not found: " + command)

except (KeyboardInterrupt, EOFError):
    print()
    exit()

